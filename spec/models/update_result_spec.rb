=begin
#finAPI RESTful Services (alpha build)

#finAPI RESTful Services (alpha build)

OpenAPI spec version: finAPI PSD2-alpha (based on v.1.73.0)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'spec_helper'
require 'json'
require 'date'

# Unit tests for FinapiApi::UpdateResult
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UpdateResult' do
  before do
    # run before each test
    @instance = FinapiApi::UpdateResult.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UpdateResult' do
    it 'should create an instance of UpdateResult' do
      expect(@instance).to be_instance_of(FinapiApi::UpdateResult)
    end
  end
  describe 'test attribute "result"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["OK", "BANK_SERVER_REJECTION", "INTERNAL_SERVER_ERROR"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.result = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "error_message"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  describe 'test attribute "error_type"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
      # validator = Petstore::EnumTest::EnumAttributeValidator.new('String', ["BUSINESS", "TECHNICAL"])
      # validator.allowable_values.each do |value|
      #   expect { @instance.error_type = value }.not_to raise_error
      # end
    end
  end

  describe 'test attribute "timestamp"' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
