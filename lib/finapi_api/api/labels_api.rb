=begin
#finAPI RESTful Services (alpha build)

#finAPI RESTful Services (alpha build)

OpenAPI spec version: finAPI PSD2-alpha (based on v.1.73.0)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module FinapiApi
  class LabelsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new label
    # Create a new label for a specific user. Must pass the new label's name and the user's access_token.<br/><br/>Users can create labels to flag transactions (see method PATCH /transactions), with the goal of collecting and getting an overview of all transactions of a certain 'type'. In this sense, labels are similar to transaction categories. However, labels are supposed to depict more of an implicit meaning of a transaction. For instance, a user might want to assign a flag to a transaction that reminds him that he can offset it against tax. At the same time, the category of the transactions might be something like 'insurance', which is a more 'fact-based', or 'objective' way of typing the transaction. Despite this semantic difference between categories and labels, there is also the difference that a transaction can be assigned multiple labels at the same time (while in contrast it can have just a single category).
    # @param body Label&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Label]
    def create_label(body, opts = {})
      data, _status_code, _headers = create_label_with_http_info(body, opts)
      data
    end

    # Create a new label
    # Create a new label for a specific user. Must pass the new label&#39;s name and the user&#39;s access_token.&lt;br/&gt;&lt;br/&gt;Users can create labels to flag transactions (see method PATCH /transactions), with the goal of collecting and getting an overview of all transactions of a certain &#39;type&#39;. In this sense, labels are similar to transaction categories. However, labels are supposed to depict more of an implicit meaning of a transaction. For instance, a user might want to assign a flag to a transaction that reminds him that he can offset it against tax. At the same time, the category of the transactions might be something like &#39;insurance&#39;, which is a more &#39;fact-based&#39;, or &#39;objective&#39; way of typing the transaction. Despite this semantic difference between categories and labels, there is also the difference that a transaction can be assigned multiple labels at the same time (while in contrast it can have just a single category).
    # @param body Label&#39;s name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Label, Fixnum, Hash)>] Label data, response status code and response headers
    def create_label_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LabelsApi.create_label ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LabelsApi.create_label"
      end
      # resource path
      local_var_path = '/api/v1/labels'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Label')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LabelsApi#create_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all labels
    # Delete all labels of the user that is authorized by the access_token. Must pass the user's access_token.
    # @param [Hash] opts the optional parameters
    # @return [IdentifierList]
    def delete_all_labels(opts = {})
      data, _status_code, _headers = delete_all_labels_with_http_info(opts)
      data
    end

    # Delete all labels
    # Delete all labels of the user that is authorized by the access_token. Must pass the user&#39;s access_token.
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentifierList, Fixnum, Hash)>] IdentifierList data, response status code and response headers
    def delete_all_labels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LabelsApi.delete_all_labels ...'
      end
      # resource path
      local_var_path = '/api/v1/labels'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentifierList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LabelsApi#delete_all_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a label
    # Delete a single label of the user that is authorized by the access_token. Must pass the label's identifier and the user's access_token.
    # @param id Identifier of the label to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_label(id, opts = {})
      delete_label_with_http_info(id, opts)
      nil
    end

    # Delete a label
    # Delete a single label of the user that is authorized by the access_token. Must pass the label&#39;s identifier and the user&#39;s access_token.
    # @param id Identifier of the label to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_label_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LabelsApi.delete_label ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LabelsApi.delete_label"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/[\d]+/)
        fail ArgumentError, "invalid value for 'id' when calling LabelsApi.delete_label, must conform to the pattern /[\d]+/."
      end

      # resource path
      local_var_path = '/api/v1/labels/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LabelsApi#delete_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Edit a label
    # Change the name of a label of the user that is authorized by the access_token. Must pass the label's identifier, the label's new name and the user's access_token.
    # @param id Label&#39;s identifier
    # @param body Label&#39;s new name
    # @param [Hash] opts the optional parameters
    # @return [Label]
    def edit_label(id, body, opts = {})
      data, _status_code, _headers = edit_label_with_http_info(id, body, opts)
      data
    end

    # Edit a label
    # Change the name of a label of the user that is authorized by the access_token. Must pass the label&#39;s identifier, the label&#39;s new name and the user&#39;s access_token.
    # @param id Label&#39;s identifier
    # @param body Label&#39;s new name
    # @param [Hash] opts the optional parameters
    # @return [Array<(Label, Fixnum, Hash)>] Label data, response status code and response headers
    def edit_label_with_http_info(id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LabelsApi.edit_label ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LabelsApi.edit_label"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/[\d]+/)
        fail ArgumentError, "invalid value for 'id' when calling LabelsApi.edit_label, must conform to the pattern /[\d]+/."
      end

      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling LabelsApi.edit_label"
      end
      # resource path
      local_var_path = '/api/v1/labels/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Label')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LabelsApi#edit_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get and search all labels
    # Get labels of the user that is authorized by the access_token. Must pass the user's access_token. You can set optional search criteria to get only those labels that you are interested in. If you do not specify any search criteria, then this service functions as a 'get all' service.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids A comma-separated list of label identifiers. If specified, then only labels whose identifier match any of the given identifiers will be regarded. The maximum number of identifiers is 1000.
    # @option opts [String] :search If specified, then only those labels will be contained in the result whose &#39;name&#39; contains the given search string (the matching works case-insensitive). If no labels contain the search string in their name, then the result will be an empty list. NOTE: If the given search string consists of several terms (separated by whitespace), then ALL of these terms must be contained in the name in order for a label to get included into the result.
    # @option opts [Integer] :page Result page that you want to retrieve (default to 1)
    # @option opts [Integer] :per_page Maximum number of records per page. Can be at most 500. NOTE: Due to its validation and visualization, the swagger frontend might show very low performance, or even crashes, when a service responds with a lot of data. It is recommended to use a HTTP client like Postman or DHC instead of our swagger frontend for service calls with large page sizes. (default to 20)
    # @option opts [Array<String>] :order Determines the order of the results. You can order the results by &#39;id&#39; or &#39;name&#39;. The default order for all services is &#39;id,asc&#39;. Since both fields (id and name) are unique, ordering by multiple fields is pointless. The general format is: &#39;property[,asc|desc]&#39;, with &#39;asc&#39; being the default value. 
    # @return [PageableLabelList]
    def get_and_search_all_labels(opts = {})
      data, _status_code, _headers = get_and_search_all_labels_with_http_info(opts)
      data
    end

    # Get and search all labels
    # Get labels of the user that is authorized by the access_token. Must pass the user&#39;s access_token. You can set optional search criteria to get only those labels that you are interested in. If you do not specify any search criteria, then this service functions as a &#39;get all&#39; service.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids A comma-separated list of label identifiers. If specified, then only labels whose identifier match any of the given identifiers will be regarded. The maximum number of identifiers is 1000.
    # @option opts [String] :search If specified, then only those labels will be contained in the result whose &#39;name&#39; contains the given search string (the matching works case-insensitive). If no labels contain the search string in their name, then the result will be an empty list. NOTE: If the given search string consists of several terms (separated by whitespace), then ALL of these terms must be contained in the name in order for a label to get included into the result.
    # @option opts [Integer] :page Result page that you want to retrieve
    # @option opts [Integer] :per_page Maximum number of records per page. Can be at most 500. NOTE: Due to its validation and visualization, the swagger frontend might show very low performance, or even crashes, when a service responds with a lot of data. It is recommended to use a HTTP client like Postman or DHC instead of our swagger frontend for service calls with large page sizes.
    # @option opts [Array<String>] :order Determines the order of the results. You can order the results by &#39;id&#39; or &#39;name&#39;. The default order for all services is &#39;id,asc&#39;. Since both fields (id and name) are unique, ordering by multiple fields is pointless. The general format is: &#39;property[,asc|desc]&#39;, with &#39;asc&#39; being the default value. 
    # @return [Array<(PageableLabelList, Fixnum, Hash)>] PageableLabelList data, response status code and response headers
    def get_and_search_all_labels_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LabelsApi.get_and_search_all_labels ...'
      end
      if @api_client.config.client_side_validation && !opts[:'page'].nil? && opts[:'page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"page"]" when calling LabelsApi.get_and_search_all_labels, must be greater than or equal to 1.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] > 500
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling LabelsApi.get_and_search_all_labels, must be smaller than or equal to 500.'
      end

      if @api_client.config.client_side_validation && !opts[:'per_page'].nil? && opts[:'per_page'] < 1
        fail ArgumentError, 'invalid value for "opts[:"per_page"]" when calling LabelsApi.get_and_search_all_labels, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/api/v1/labels'

      # query parameters
      query_params = {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'search'] = opts[:'search'] if !opts[:'search'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'perPage'] = opts[:'per_page'] if !opts[:'per_page'].nil?
      query_params[:'order'] = @api_client.build_collection_param(opts[:'order'], :multi) if !opts[:'order'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PageableLabelList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LabelsApi#get_and_search_all_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a label
    # Get a single label of the user that is authorized by the access_token. Must pass the label's identifier and the user's access_token.
    # @param id Identifier of requested label
    # @param [Hash] opts the optional parameters
    # @return [Label]
    def get_label(id, opts = {})
      data, _status_code, _headers = get_label_with_http_info(id, opts)
      data
    end

    # Get a label
    # Get a single label of the user that is authorized by the access_token. Must pass the label&#39;s identifier and the user&#39;s access_token.
    # @param id Identifier of requested label
    # @param [Hash] opts the optional parameters
    # @return [Array<(Label, Fixnum, Hash)>] Label data, response status code and response headers
    def get_label_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LabelsApi.get_label ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling LabelsApi.get_label"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/[\d]+/)
        fail ArgumentError, "invalid value for 'id' when calling LabelsApi.get_label, must conform to the pattern /[\d]+/."
      end

      # resource path
      local_var_path = '/api/v1/labels/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Label')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LabelsApi#get_label\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get multiple labels
    # Get a list of multiple labels of the user that is authorized by the access_token.Must pass the labels' identifiers and the user's access_token. Identifiers that do not exist or do not relate to the authorized user will not be contained in the result (If this applies to all of the given identifiers, then the result will be an empty list). WARNING: This service is deprecated and will be removed at some point. If you want to get multiple labels, please instead use the service 'Get all labels' and pass a comma-separated list of identifiers as a parameter 'ids'.
    # @param ids Comma-separated list of identifiers of requested labels
    # @param [Hash] opts the optional parameters
    # @return [LabelList]
    def get_multiple_labels(ids, opts = {})
      data, _status_code, _headers = get_multiple_labels_with_http_info(ids, opts)
      data
    end

    # Get multiple labels
    # Get a list of multiple labels of the user that is authorized by the access_token.Must pass the labels&#39; identifiers and the user&#39;s access_token. Identifiers that do not exist or do not relate to the authorized user will not be contained in the result (If this applies to all of the given identifiers, then the result will be an empty list). WARNING: This service is deprecated and will be removed at some point. If you want to get multiple labels, please instead use the service &#39;Get all labels&#39; and pass a comma-separated list of identifiers as a parameter &#39;ids&#39;.
    # @param ids Comma-separated list of identifiers of requested labels
    # @param [Hash] opts the optional parameters
    # @return [Array<(LabelList, Fixnum, Hash)>] LabelList data, response status code and response headers
    def get_multiple_labels_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: LabelsApi.get_multiple_labels ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling LabelsApi.get_multiple_labels"
      end
      if @api_client.config.client_side_validation && ids !~ Regexp.new(/[\d]+,[\d,]+/)
        fail ArgumentError, "invalid value for 'ids' when calling LabelsApi.get_multiple_labels, must conform to the pattern /[\d]+,[\d,]+/."
      end

      # resource path
      local_var_path = '/api/v1/labels/{ids}'.sub('{' + 'ids' + '}', ids.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LabelList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LabelsApi#get_multiple_labels\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
