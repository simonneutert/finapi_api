=begin
#finAPI RESTful Services (alpha build)

#finAPI RESTful Services (alpha build)

OpenAPI spec version: finAPI PSD2-alpha (based on v.1.73.0)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module FinapiApi
  # Container for a security position's data
  class Security
    # Identifier. Note: Whenever a security account is being updated, its security positions will be internally re-created, meaning that the identifier of a security position might change over time.
    attr_accessor :id

    # Security account identifier
    attr_accessor :account_id

    # Name
    attr_accessor :name

    # ISIN
    attr_accessor :isin

    # WKN
    attr_accessor :wkn

    # Quote
    attr_accessor :quote

    # Currency of quote
    attr_accessor :quote_currency

    # Type of quote. 'PERC' if quote is a percentage value, 'ACTU' if quote is the actual amount
    attr_accessor :quote_type

    # Quote date in the format 'YYYY-MM-DD HH:MM:SS.SSS' (german time).
    attr_accessor :quote_date

    # Value of quantity or nominal
    attr_accessor :quantity_nominal

    # Type of quantity or nominal value. 'UNIT' if value is a quantity, 'FAMT' if value is the nominal amount
    attr_accessor :quantity_nominal_type

    # Market value
    attr_accessor :market_value

    # Currency of market value
    attr_accessor :market_value_currency

    # Entry quote
    attr_accessor :entry_quote

    # Currency of entry quote
    attr_accessor :entry_quote_currency

    # Current profit or loss
    attr_accessor :profit_or_loss

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'account_id' => :'accountId',
        :'name' => :'name',
        :'isin' => :'isin',
        :'wkn' => :'wkn',
        :'quote' => :'quote',
        :'quote_currency' => :'quoteCurrency',
        :'quote_type' => :'quoteType',
        :'quote_date' => :'quoteDate',
        :'quantity_nominal' => :'quantityNominal',
        :'quantity_nominal_type' => :'quantityNominalType',
        :'market_value' => :'marketValue',
        :'market_value_currency' => :'marketValueCurrency',
        :'entry_quote' => :'entryQuote',
        :'entry_quote_currency' => :'entryQuoteCurrency',
        :'profit_or_loss' => :'profitOrLoss'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'account_id' => :'Integer',
        :'name' => :'String',
        :'isin' => :'String',
        :'wkn' => :'String',
        :'quote' => :'Float',
        :'quote_currency' => :'String',
        :'quote_type' => :'String',
        :'quote_date' => :'String',
        :'quantity_nominal' => :'Float',
        :'quantity_nominal_type' => :'String',
        :'market_value' => :'Float',
        :'market_value_currency' => :'String',
        :'entry_quote' => :'Float',
        :'entry_quote_currency' => :'String',
        :'profit_or_loss' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'accountId')
        self.account_id = attributes[:'accountId']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'isin')
        self.isin = attributes[:'isin']
      end

      if attributes.has_key?(:'wkn')
        self.wkn = attributes[:'wkn']
      end

      if attributes.has_key?(:'quote')
        self.quote = attributes[:'quote']
      end

      if attributes.has_key?(:'quoteCurrency')
        self.quote_currency = attributes[:'quoteCurrency']
      end

      if attributes.has_key?(:'quoteType')
        self.quote_type = attributes[:'quoteType']
      end

      if attributes.has_key?(:'quoteDate')
        self.quote_date = attributes[:'quoteDate']
      end

      if attributes.has_key?(:'quantityNominal')
        self.quantity_nominal = attributes[:'quantityNominal']
      end

      if attributes.has_key?(:'quantityNominalType')
        self.quantity_nominal_type = attributes[:'quantityNominalType']
      end

      if attributes.has_key?(:'marketValue')
        self.market_value = attributes[:'marketValue']
      end

      if attributes.has_key?(:'marketValueCurrency')
        self.market_value_currency = attributes[:'marketValueCurrency']
      end

      if attributes.has_key?(:'entryQuote')
        self.entry_quote = attributes[:'entryQuote']
      end

      if attributes.has_key?(:'entryQuoteCurrency')
        self.entry_quote_currency = attributes[:'entryQuoteCurrency']
      end

      if attributes.has_key?(:'profitOrLoss')
        self.profit_or_loss = attributes[:'profitOrLoss']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @account_id.nil?
        invalid_properties.push('invalid value for "account_id", account_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @account_id.nil?
      quote_type_validator = EnumAttributeValidator.new('String', ['ACTU', 'PERC'])
      return false unless quote_type_validator.valid?(@quote_type)
      quantity_nominal_type_validator = EnumAttributeValidator.new('String', ['UNIT', 'FAMT'])
      return false unless quantity_nominal_type_validator.valid?(@quantity_nominal_type)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quote_type Object to be assigned
    def quote_type=(quote_type)
      validator = EnumAttributeValidator.new('String', ['ACTU', 'PERC'])
      unless validator.valid?(quote_type)
        fail ArgumentError, 'invalid value for "quote_type", must be one of #{validator.allowable_values}.'
      end
      @quote_type = quote_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] quantity_nominal_type Object to be assigned
    def quantity_nominal_type=(quantity_nominal_type)
      validator = EnumAttributeValidator.new('String', ['UNIT', 'FAMT'])
      unless validator.valid?(quantity_nominal_type)
        fail ArgumentError, 'invalid value for "quantity_nominal_type", must be one of #{validator.allowable_values}.'
      end
      @quantity_nominal_type = quantity_nominal_type
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          account_id == o.account_id &&
          name == o.name &&
          isin == o.isin &&
          wkn == o.wkn &&
          quote == o.quote &&
          quote_currency == o.quote_currency &&
          quote_type == o.quote_type &&
          quote_date == o.quote_date &&
          quantity_nominal == o.quantity_nominal &&
          quantity_nominal_type == o.quantity_nominal_type &&
          market_value == o.market_value &&
          market_value_currency == o.market_value_currency &&
          entry_quote == o.entry_quote &&
          entry_quote_currency == o.entry_quote_currency &&
          profit_or_loss == o.profit_or_loss
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, account_id, name, isin, wkn, quote, quote_currency, quote_type, quote_date, quantity_nominal, quantity_nominal_type, market_value, market_value_currency, entry_quote, entry_quote_currency, profit_or_loss].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = FinapiApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
