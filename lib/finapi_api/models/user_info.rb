=begin
#finAPI RESTful Services (alpha build)

#finAPI RESTful Services (alpha build)

OpenAPI spec version: finAPI PSD2-alpha (based on v.1.73.0)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module FinapiApi
  # Container for user information
  class UserInfo
    # User's identifier
    attr_accessor :user_id

    # User's registration date, in the format 'YYYY-MM-DD'
    attr_accessor :registration_date

    # User's deletion date, in the format 'YYYY-MM-DD'. May be null if the user has not been deleted.
    attr_accessor :deletion_date

    # User's last active date, in the format 'YYYY-MM-DD'. May be null if the user has not yet logged in.
    attr_accessor :last_active_date

    # Number of bank connections that currently exist for this user.
    attr_accessor :bank_connection_count

    # Latest date of when a bank connection was imported for this user, in the format 'YYYY-MM-DD'. This field is null when there has never been a bank connection import.
    attr_accessor :latest_bank_connection_import_date

    # Latest date of when a bank connection was deleted for this user, in the format 'YYYY-MM-DD'. This field is null when there has never been a bank connection deletion.
    attr_accessor :latest_bank_connection_deletion_date

    # Additional information about the user's data or activities, broken down in months. The list will by default contain an entry for each month starting with the month of when the user was registered, up to the current month. The date range may vary when you have limited it in the request. <br/><br/>Please note:<br/>&bull; this field is only set when 'includeMonthlyStats' = true, otherwise it will be null.<br/>&bull; the list is always ordered from the latest month first, to the oldest month last.<br/>&bull; the list will never contain an entry for a month that was prior to the month of when the user was registered, or after the month of when the user was deleted, even when you have explicitly set a respective date range. This means that the list may be empty if you are requesting a date range where the user didn't exist yet, or didn't exist any longer.
    attr_accessor :monthly_stats

    # Whether the user is currently locked (for further information, see the 'maxUserLoginAttempts' setting in your client's configuration). Note that deleted users will always have this field set to 'false'.
    attr_accessor :is_locked

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user_id' => :'userId',
        :'registration_date' => :'registrationDate',
        :'deletion_date' => :'deletionDate',
        :'last_active_date' => :'lastActiveDate',
        :'bank_connection_count' => :'bankConnectionCount',
        :'latest_bank_connection_import_date' => :'latestBankConnectionImportDate',
        :'latest_bank_connection_deletion_date' => :'latestBankConnectionDeletionDate',
        :'monthly_stats' => :'monthlyStats',
        :'is_locked' => :'isLocked'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'user_id' => :'String',
        :'registration_date' => :'String',
        :'deletion_date' => :'String',
        :'last_active_date' => :'String',
        :'bank_connection_count' => :'Integer',
        :'latest_bank_connection_import_date' => :'String',
        :'latest_bank_connection_deletion_date' => :'String',
        :'monthly_stats' => :'Array<MonthlyUserStats>',
        :'is_locked' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end

      if attributes.has_key?(:'registrationDate')
        self.registration_date = attributes[:'registrationDate']
      end

      if attributes.has_key?(:'deletionDate')
        self.deletion_date = attributes[:'deletionDate']
      end

      if attributes.has_key?(:'lastActiveDate')
        self.last_active_date = attributes[:'lastActiveDate']
      end

      if attributes.has_key?(:'bankConnectionCount')
        self.bank_connection_count = attributes[:'bankConnectionCount']
      end

      if attributes.has_key?(:'latestBankConnectionImportDate')
        self.latest_bank_connection_import_date = attributes[:'latestBankConnectionImportDate']
      end

      if attributes.has_key?(:'latestBankConnectionDeletionDate')
        self.latest_bank_connection_deletion_date = attributes[:'latestBankConnectionDeletionDate']
      end

      if attributes.has_key?(:'monthlyStats')
        if (value = attributes[:'monthlyStats']).is_a?(Array)
          self.monthly_stats = value
        end
      end

      if attributes.has_key?(:'isLocked')
        self.is_locked = attributes[:'isLocked']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @user_id.nil?
        invalid_properties.push('invalid value for "user_id", user_id cannot be nil.')
      end

      if @registration_date.nil?
        invalid_properties.push('invalid value for "registration_date", registration_date cannot be nil.')
      end

      if @bank_connection_count.nil?
        invalid_properties.push('invalid value for "bank_connection_count", bank_connection_count cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @user_id.nil?
      return false if @registration_date.nil?
      return false if @bank_connection_count.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user_id == o.user_id &&
          registration_date == o.registration_date &&
          deletion_date == o.deletion_date &&
          last_active_date == o.last_active_date &&
          bank_connection_count == o.bank_connection_count &&
          latest_bank_connection_import_date == o.latest_bank_connection_import_date &&
          latest_bank_connection_deletion_date == o.latest_bank_connection_deletion_date &&
          monthly_stats == o.monthly_stats &&
          is_locked == o.is_locked
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [user_id, registration_date, deletion_date, last_active_date, bank_connection_count, latest_bank_connection_import_date, latest_bank_connection_deletion_date, monthly_stats, is_locked].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = FinapiApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
