=begin
#finAPI RESTful Services (alpha build)

#finAPI RESTful Services (alpha build)

OpenAPI spec version: finAPI PSD2-alpha (based on v.1.73.0)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module FinapiApi
  # Container for a bank connection's data
  class BankConnection
    # Bank connection identifier
    attr_accessor :id

    # Identifier of the bank that this connection belongs to. NOTE: This field is DEPRECATED and will get removed at some point. Please refer to the 'bank' field instead.
    attr_accessor :bank_id

    # Bank that this connection belongs to
    attr_accessor :bank

    # Custom name for the bank connection. You can set this field with the 'Edit a bank connection' service, as well as during the initial import of the bank connection. Maximum length is 64.
    attr_accessor :name

    # NOTE: This field is deprecated and will be removed at some point. Please refer to the 'loginCredentials' in the 'interfaces' field instead.<br><br>Stored online banking user ID credential. This field may be null for the 'demo connection'. If your client has no license for processing banking credentials then a banking user ID will always be 'XXXXX'
    attr_accessor :banking_user_id

    # NOTE: This field is deprecated and will be removed at some point. Please refer to the 'loginCredentials' in the 'interfaces' field instead.<br><br>Stored online banking customer ID credential. If your client has no license for processing banking credentials or if this field contains a value that requires password protection (see field ‘isCustomerIdPassword’ in Bank Resource) then the banking customer ID will always be 'XXXXX
    attr_accessor :banking_customer_id

    # NOTE: This field is deprecated and will be removed at some point. Please refer to the 'loginCredentials' in the 'interfaces' field instead.<br><br>Stored online banking PIN. If a PIN is stored, this will always be 'XXXXX'
    attr_accessor :banking_pin

    # Bank connection type
    attr_accessor :type

    # Current status of data download (account balances and transactions/securities). The POST /bankConnections/import and POST /bankConnections/<id>/update services will set this flag to IN_PROGRESS before they return. Once the import or update has finished, the status will be changed to READY.
    attr_accessor :update_status

    # Current status of transactions categorization. The asynchronous download process that is triggered by a call of the POST /bankConnections/import and POST /bankConnections/<id>/update services (and also by finAPI's auto update, if enabled) will set this flag to PENDING once the download has finished and a categorization is scheduled for the imported transactions. A separate categorization thread will then start to categorize the transactions (during this process, the status is IN_PROGRESS). When categorization has finished, the status will be (re-)set to READY. Note that the current categorization status should only be queried after the download has finished, i.e. once the download status has switched from IN_PROGRESS to READY.
    attr_accessor :categorization_status

    # NOTE: This field is deprecated and will be removed at some point. Please refer to corresponding field in 'interfaces' instead.<br><br>Result of the last manual update of this bank connection. If no manual update has ever been done so far, then this field will not be set.
    attr_accessor :last_manual_update

    # NOTE: This field is deprecated and will be removed at some point. Please refer to corresponding field in 'interfaces' instead.<br><br>Result of the last auto update of this bank connection (ran by finAPI's automatic batch update process). If no auto update has ever been done so far, then this field will not be set.
    attr_accessor :last_auto_update

    # NOTE: This field is deprecated and will be removed at some point. Please refer to corresponding field in 'interfaces' instead.<br><br>Available two-step-procedures for this bank connection, used for submitting a money transfer or direct debit request (see /accounts/requestSepaMoneyTransfer or /requestSepaDirectDebit). The available two-step-procedures are re-evaluated each time this bank connection is updated (/bankConnections/update). This means that this list may change as a result of an update.
    attr_accessor :two_step_procedures

    # NOTE: This field is deprecated and will be removed at some point. Please refer to the account capabilities instead.<br><br>Whether this bank connection accepts money transfer requests where the recipient's account is defined just by the IBAN (without an additional BIC). This field is re-evaluated each time this bank connection is updated. <br/>See also: /accounts/requestSepaMoneyTransfer
    attr_accessor :iban_only_money_transfer_supported

    # NOTE: This field is deprecated and will be removed at some point. Please refer to the account capabilities instead.<br><br>Whether this bank connection accepts direct debit requests where the debitor's account is defined just by the IBAN (without an additional BIC). This field is re-evaluated each time this bank connection is updated. <br/>See also: /accounts/requestSepaDirectDebit
    attr_accessor :iban_only_direct_debit_supported

    # NOTE: This field is deprecated and will be removed at some point. Please refer to the account capabilities instead.<br><br>Whether this bank connection supports submitting collective money transfers. This field is re-evaluated each time this bank connection is updated. <br/>See also: /accounts/requestSepaMoneyTransfer
    attr_accessor :collective_money_transfer_supported

    # NOTE: This field is deprecated and will be removed at some point. Please refer to corresponding field in 'interfaces' instead.<br><br>The default two-step-procedure. Must match one of the available 'procedureId's from the 'twoStepProcedures' list. When this field is set, you can execute two-step-procedures (accounts/requestSepaMoneyTransfer or /requestSepaDirectDebit) without having to explicitly set a procedure. finAPI will use the default procedure in such cases. Note that the list of available procedures of a bank connection may change as a result of an update of the connection, and if this field references a procedure that is no longer available after an update, finAPI will automatically clear the default procedure (set it to null).s
    attr_accessor :default_two_step_procedure_id

    # Identifiers of the accounts that belong to this bank connection
    attr_accessor :account_ids

    # Information about the owner(s) of the bank connection
    attr_accessor :owners

    # Set of interfaces that are connected for this bank connection.
    attr_accessor :interfaces

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'bank_id' => :'bankId',
        :'bank' => :'bank',
        :'name' => :'name',
        :'banking_user_id' => :'bankingUserId',
        :'banking_customer_id' => :'bankingCustomerId',
        :'banking_pin' => :'bankingPin',
        :'type' => :'type',
        :'update_status' => :'updateStatus',
        :'categorization_status' => :'categorizationStatus',
        :'last_manual_update' => :'lastManualUpdate',
        :'last_auto_update' => :'lastAutoUpdate',
        :'two_step_procedures' => :'twoStepProcedures',
        :'iban_only_money_transfer_supported' => :'ibanOnlyMoneyTransferSupported',
        :'iban_only_direct_debit_supported' => :'ibanOnlyDirectDebitSupported',
        :'collective_money_transfer_supported' => :'collectiveMoneyTransferSupported',
        :'default_two_step_procedure_id' => :'defaultTwoStepProcedureId',
        :'account_ids' => :'accountIds',
        :'owners' => :'owners',
        :'interfaces' => :'interfaces'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'id' => :'Integer',
        :'bank_id' => :'Integer',
        :'bank' => :'Bank',
        :'name' => :'String',
        :'banking_user_id' => :'String',
        :'banking_customer_id' => :'String',
        :'banking_pin' => :'String',
        :'type' => :'String',
        :'update_status' => :'String',
        :'categorization_status' => :'String',
        :'last_manual_update' => :'UpdateResult',
        :'last_auto_update' => :'UpdateResult',
        :'two_step_procedures' => :'Array<TwoStepProcedure>',
        :'iban_only_money_transfer_supported' => :'BOOLEAN',
        :'iban_only_direct_debit_supported' => :'BOOLEAN',
        :'collective_money_transfer_supported' => :'BOOLEAN',
        :'default_two_step_procedure_id' => :'String',
        :'account_ids' => :'Array<Integer>',
        :'owners' => :'Array<BankConnectionOwner>',
        :'interfaces' => :'Array<BankConnectionInterface>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'bankId')
        self.bank_id = attributes[:'bankId']
      end

      if attributes.has_key?(:'bank')
        self.bank = attributes[:'bank']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'bankingUserId')
        self.banking_user_id = attributes[:'bankingUserId']
      end

      if attributes.has_key?(:'bankingCustomerId')
        self.banking_customer_id = attributes[:'bankingCustomerId']
      end

      if attributes.has_key?(:'bankingPin')
        self.banking_pin = attributes[:'bankingPin']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'updateStatus')
        self.update_status = attributes[:'updateStatus']
      end

      if attributes.has_key?(:'categorizationStatus')
        self.categorization_status = attributes[:'categorizationStatus']
      end

      if attributes.has_key?(:'lastManualUpdate')
        self.last_manual_update = attributes[:'lastManualUpdate']
      end

      if attributes.has_key?(:'lastAutoUpdate')
        self.last_auto_update = attributes[:'lastAutoUpdate']
      end

      if attributes.has_key?(:'twoStepProcedures')
        if (value = attributes[:'twoStepProcedures']).is_a?(Array)
          self.two_step_procedures = value
        end
      end

      if attributes.has_key?(:'ibanOnlyMoneyTransferSupported')
        self.iban_only_money_transfer_supported = attributes[:'ibanOnlyMoneyTransferSupported']
      end

      if attributes.has_key?(:'ibanOnlyDirectDebitSupported')
        self.iban_only_direct_debit_supported = attributes[:'ibanOnlyDirectDebitSupported']
      end

      if attributes.has_key?(:'collectiveMoneyTransferSupported')
        self.collective_money_transfer_supported = attributes[:'collectiveMoneyTransferSupported']
      end

      if attributes.has_key?(:'defaultTwoStepProcedureId')
        self.default_two_step_procedure_id = attributes[:'defaultTwoStepProcedureId']
      end

      if attributes.has_key?(:'accountIds')
        if (value = attributes[:'accountIds']).is_a?(Array)
          self.account_ids = value
        end
      end

      if attributes.has_key?(:'owners')
        if (value = attributes[:'owners']).is_a?(Array)
          self.owners = value
        end
      end

      if attributes.has_key?(:'interfaces')
        if (value = attributes[:'interfaces']).is_a?(Array)
          self.interfaces = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @bank_id.nil?
        invalid_properties.push('invalid value for "bank_id", bank_id cannot be nil.')
      end

      if @bank.nil?
        invalid_properties.push('invalid value for "bank", bank cannot be nil.')
      end

      if @type.nil?
        invalid_properties.push('invalid value for "type", type cannot be nil.')
      end

      if @update_status.nil?
        invalid_properties.push('invalid value for "update_status", update_status cannot be nil.')
      end

      if @categorization_status.nil?
        invalid_properties.push('invalid value for "categorization_status", categorization_status cannot be nil.')
      end

      if @iban_only_money_transfer_supported.nil?
        invalid_properties.push('invalid value for "iban_only_money_transfer_supported", iban_only_money_transfer_supported cannot be nil.')
      end

      if @iban_only_direct_debit_supported.nil?
        invalid_properties.push('invalid value for "iban_only_direct_debit_supported", iban_only_direct_debit_supported cannot be nil.')
      end

      if @collective_money_transfer_supported.nil?
        invalid_properties.push('invalid value for "collective_money_transfer_supported", collective_money_transfer_supported cannot be nil.')
      end

      if @account_ids.nil?
        invalid_properties.push('invalid value for "account_ids", account_ids cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @bank_id.nil?
      return false if @bank.nil?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ['ONLINE', 'DEMO'])
      return false unless type_validator.valid?(@type)
      return false if @update_status.nil?
      update_status_validator = EnumAttributeValidator.new('String', ['IN_PROGRESS', 'READY'])
      return false unless update_status_validator.valid?(@update_status)
      return false if @categorization_status.nil?
      categorization_status_validator = EnumAttributeValidator.new('String', ['IN_PROGRESS', 'PENDING', 'READY'])
      return false unless categorization_status_validator.valid?(@categorization_status)
      return false if @iban_only_money_transfer_supported.nil?
      return false if @iban_only_direct_debit_supported.nil?
      return false if @collective_money_transfer_supported.nil?
      return false if @account_ids.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ['ONLINE', 'DEMO'])
      unless validator.valid?(type)
        fail ArgumentError, 'invalid value for "type", must be one of #{validator.allowable_values}.'
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] update_status Object to be assigned
    def update_status=(update_status)
      validator = EnumAttributeValidator.new('String', ['IN_PROGRESS', 'READY'])
      unless validator.valid?(update_status)
        fail ArgumentError, 'invalid value for "update_status", must be one of #{validator.allowable_values}.'
      end
      @update_status = update_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] categorization_status Object to be assigned
    def categorization_status=(categorization_status)
      validator = EnumAttributeValidator.new('String', ['IN_PROGRESS', 'PENDING', 'READY'])
      unless validator.valid?(categorization_status)
        fail ArgumentError, 'invalid value for "categorization_status", must be one of #{validator.allowable_values}.'
      end
      @categorization_status = categorization_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          bank_id == o.bank_id &&
          bank == o.bank &&
          name == o.name &&
          banking_user_id == o.banking_user_id &&
          banking_customer_id == o.banking_customer_id &&
          banking_pin == o.banking_pin &&
          type == o.type &&
          update_status == o.update_status &&
          categorization_status == o.categorization_status &&
          last_manual_update == o.last_manual_update &&
          last_auto_update == o.last_auto_update &&
          two_step_procedures == o.two_step_procedures &&
          iban_only_money_transfer_supported == o.iban_only_money_transfer_supported &&
          iban_only_direct_debit_supported == o.iban_only_direct_debit_supported &&
          collective_money_transfer_supported == o.collective_money_transfer_supported &&
          default_two_step_procedure_id == o.default_two_step_procedure_id &&
          account_ids == o.account_ids &&
          owners == o.owners &&
          interfaces == o.interfaces
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [id, bank_id, bank, name, banking_user_id, banking_customer_id, banking_pin, type, update_status, categorization_status, last_manual_update, last_auto_update, two_step_procedures, iban_only_money_transfer_supported, iban_only_direct_debit_supported, collective_money_transfer_supported, default_two_step_procedure_id, account_ids, owners, interfaces].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = FinapiApi.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
