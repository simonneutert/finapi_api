=begin
#finAPI RESTful Services (alpha build)

#finAPI RESTful Services (alpha build)

OpenAPI spec version: finAPI PSD2-alpha (based on v.1.73.0)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'uri'

module FinapiApiClient
  class NotificationRulesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create a new notification rule
    # Create a new notification rule for a specific user. Must pass the user's access_token.<br/><br/>Setting up notification rules for a user allows your client application to get notified about changes in the user's data, e.g. when new transactions were downloaded, an account's balance has changed, or the user's banking credentials are no longer correct. Note that currently, this feature is implemented only for finAPI's automatic batch update, i.e. notification rules are only relevant when the user has activated the automatic updates (and when the automatic batch update is activated in general for your client).<br/><br/>There are different kinds of notification rules. The kind of a rule is depicted by the 'triggerEvent'. The trigger event specifies what data you have to pass when creating a rule (specifically, the contents of the 'params' field), on which events finAPI will send notifications to your client application, as well as what data is contained in those notifications. The specifics of the different trigger events are documented in the following article on our Dev Portal: <a href='https://finapi.zendesk.com/hc/en-us/articles/232324608-How-to-create-notification-rules-and-receive-notifications' target='_blank'>How to create notification rules and receive notifications</a>
    # @param body Notification rule parameters
    # @param [Hash] opts the optional parameters
    # @return [NotificationRule]
    def create_notification_rule(body, opts = {})
      data, _status_code, _headers = create_notification_rule_with_http_info(body, opts)
      data
    end

    # Create a new notification rule
    # Create a new notification rule for a specific user. Must pass the user&#39;s access_token.&lt;br/&gt;&lt;br/&gt;Setting up notification rules for a user allows your client application to get notified about changes in the user&#39;s data, e.g. when new transactions were downloaded, an account&#39;s balance has changed, or the user&#39;s banking credentials are no longer correct. Note that currently, this feature is implemented only for finAPI&#39;s automatic batch update, i.e. notification rules are only relevant when the user has activated the automatic updates (and when the automatic batch update is activated in general for your client).&lt;br/&gt;&lt;br/&gt;There are different kinds of notification rules. The kind of a rule is depicted by the &#39;triggerEvent&#39;. The trigger event specifies what data you have to pass when creating a rule (specifically, the contents of the &#39;params&#39; field), on which events finAPI will send notifications to your client application, as well as what data is contained in those notifications. The specifics of the different trigger events are documented in the following article on our Dev Portal: &lt;a href&#x3D;&#39;https://finapi.zendesk.com/hc/en-us/articles/232324608-How-to-create-notification-rules-and-receive-notifications&#39; target&#x3D;&#39;_blank&#39;&gt;How to create notification rules and receive notifications&lt;/a&gt;
    # @param body Notification rule parameters
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationRule, Fixnum, Hash)>] NotificationRule data, response status code and response headers
    def create_notification_rule_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationRulesApi.create_notification_rule ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling NotificationRulesApi.create_notification_rule"
      end
      # resource path
      local_var_path = '/api/v1/notificationRules'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationRulesApi#create_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete all notification rules
    # Delete all notification rules of the user that is authorized by the access_token. Must pass the user's access_token. 
    # @param [Hash] opts the optional parameters
    # @return [IdentifierList]
    def delete_all_notification_rules(opts = {})
      data, _status_code, _headers = delete_all_notification_rules_with_http_info(opts)
      data
    end

    # Delete all notification rules
    # Delete all notification rules of the user that is authorized by the access_token. Must pass the user&#39;s access_token. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(IdentifierList, Fixnum, Hash)>] IdentifierList data, response status code and response headers
    def delete_all_notification_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationRulesApi.delete_all_notification_rules ...'
      end
      # resource path
      local_var_path = '/api/v1/notificationRules'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'IdentifierList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationRulesApi#delete_all_notification_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete a notification rule
    # Delete a single notification rule of the user that is authorized by the access_token. Must pass the notification rule's identifier and the user's access_token.
    # @param id Identifier of the notification rule to delete
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_notification_rule(id, opts = {})
      delete_notification_rule_with_http_info(id, opts)
      nil
    end

    # Delete a notification rule
    # Delete a single notification rule of the user that is authorized by the access_token. Must pass the notification rule&#39;s identifier and the user&#39;s access_token.
    # @param id Identifier of the notification rule to delete
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def delete_notification_rule_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationRulesApi.delete_notification_rule ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationRulesApi.delete_notification_rule"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/[\d]+/)
        fail ArgumentError, "invalid value for 'id' when calling NotificationRulesApi.delete_notification_rule, must conform to the pattern /[\d]+/."
      end

      # resource path
      local_var_path = '/api/v1/notificationRules/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationRulesApi#delete_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get and search all notification rules
    # Get notification rules of the user that is authorized by the access_token. Must pass the user's access_token. You can set optional search criteria to get only those notification rules that you are interested in. If you do not specify any search criteria, then this service functions as a 'get all' service.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids A comma-separated list of notification rule identifiers. If specified, then only notification rules whose identifier match any of the given identifiers will be regarded. The maximum number of identifiers is 1000.
    # @option opts [String] :trigger_event If specified, then only notification rules with given trigger event will be regarded.
    # @option opts [BOOLEAN] :include_details If specified, then only notification rules that include or not include details will be regarded.
    # @return [NotificationRuleList]
    def get_and_search_all_notification_rules(opts = {})
      data, _status_code, _headers = get_and_search_all_notification_rules_with_http_info(opts)
      data
    end

    # Get and search all notification rules
    # Get notification rules of the user that is authorized by the access_token. Must pass the user&#39;s access_token. You can set optional search criteria to get only those notification rules that you are interested in. If you do not specify any search criteria, then this service functions as a &#39;get all&#39; service.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Integer>] :ids A comma-separated list of notification rule identifiers. If specified, then only notification rules whose identifier match any of the given identifiers will be regarded. The maximum number of identifiers is 1000.
    # @option opts [String] :trigger_event If specified, then only notification rules with given trigger event will be regarded.
    # @option opts [BOOLEAN] :include_details If specified, then only notification rules that include or not include details will be regarded.
    # @return [Array<(NotificationRuleList, Fixnum, Hash)>] NotificationRuleList data, response status code and response headers
    def get_and_search_all_notification_rules_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationRulesApi.get_and_search_all_notification_rules ...'
      end
      if @api_client.config.client_side_validation && opts[:'trigger_event'] && !['NEW_ACCOUNT_BALANCE', 'NEW_TRANSACTIONS', 'BANK_LOGIN_ERROR', 'FOREIGN_MONEY_TRANSFER', 'LOW_ACCOUNT_BALANCE', 'HIGH_TRANSACTION_AMOUNT', 'CATEGORY_CASH_FLOW', 'NEW_TERMS_AND_CONDITIONS'].include?(opts[:'trigger_event'])
        fail ArgumentError, 'invalid value for "trigger_event", must be one of NEW_ACCOUNT_BALANCE, NEW_TRANSACTIONS, BANK_LOGIN_ERROR, FOREIGN_MONEY_TRANSFER, LOW_ACCOUNT_BALANCE, HIGH_TRANSACTION_AMOUNT, CATEGORY_CASH_FLOW, NEW_TERMS_AND_CONDITIONS'
      end
      # resource path
      local_var_path = '/api/v1/notificationRules'

      # query parameters
      query_params = {}
      query_params[:'ids'] = @api_client.build_collection_param(opts[:'ids'], :multi) if !opts[:'ids'].nil?
      query_params[:'triggerEvent'] = opts[:'trigger_event'] if !opts[:'trigger_event'].nil?
      query_params[:'includeDetails'] = opts[:'include_details'] if !opts[:'include_details'].nil?

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationRuleList')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationRulesApi#get_and_search_all_notification_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get a notification rule
    # Get a single notification rule of the user that is authorized by the access_token. Must pass the notification rule's identifier and the user's access_token.
    # @param id Identifier of requested notification rule
    # @param [Hash] opts the optional parameters
    # @return [NotificationRule]
    def get_notification_rule(id, opts = {})
      data, _status_code, _headers = get_notification_rule_with_http_info(id, opts)
      data
    end

    # Get a notification rule
    # Get a single notification rule of the user that is authorized by the access_token. Must pass the notification rule&#39;s identifier and the user&#39;s access_token.
    # @param id Identifier of requested notification rule
    # @param [Hash] opts the optional parameters
    # @return [Array<(NotificationRule, Fixnum, Hash)>] NotificationRule data, response status code and response headers
    def get_notification_rule_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: NotificationRulesApi.get_notification_rule ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling NotificationRulesApi.get_notification_rule"
      end
      if @api_client.config.client_side_validation && id !~ Regexp.new(/[\d]+/)
        fail ArgumentError, "invalid value for 'id' when calling NotificationRulesApi.get_notification_rule, must conform to the pattern /[\d]+/."
      end

      # resource path
      local_var_path = '/api/v1/notificationRules/{id}'.sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['finapi_auth']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationRule')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationRulesApi#get_notification_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
