=begin
#finAPI RESTful Services (alpha build)

#finAPI RESTful Services (alpha build)

OpenAPI spec version: finAPI PSD2-alpha (based on v.1.73.0)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module FinapiApiClient
  # Client configuration parameters
  class ClientConfiguration
    # Whether finAPI performs a regular automatic update of your users' bank connections. To find out how the automatic batch update is configured for your client, i.e. which bank connections get updated, and at which time and interval, please contact your Sys-Admin. Note that even if the automatic batch update is enabled for your client, individual users can still disable the feature for their own bank connections.
    attr_accessor :is_automatic_batch_update_enabled

    # Callback URL to which finAPI sends the notification messages that are triggered from the automatic batch update of the users' bank connections. This field is only relevant if the automatic batch update is enabled for your client. For details about what the notification messages look like, please see the documentation in the 'Notification Rules' section. finAPI will call this URL with HTTP method POST. Note that the response of the call is not processed by finAPI. Also note that while the callback URL may be a non-secured (http) URL on the finAPI sandbox or alpha environment, it MUST be a SSL-secured (https) URL on the finAPI live system.
    attr_accessor :user_notification_callback_url

    # Callback URL for user synchronization. This field should be set if you - as a finAPI customer - have multiple clients using finAPI. In such case, all of your clients will share the same user base, making it possible for a user to be created in one client, but then deleted in another. To keep the client-side user data consistent in all clients, you should set a callback URL for each client. finAPI will send a notification to the callback URL of each client whenever a user of your user base gets deleted. Note that finAPI will send a deletion notification to ALL clients, including the one that made the user deletion request to finAPI. So when deleting a user in finAPI, a client should rely on the callback to delete the user on its own side. <p>The notification that finAPI sends to the clients' callback URLs will be a POST request, with this body: <pre>{    \"userId\" : string // contains the identifier of the deleted user    \"event\" : string // this will always be \"DELETED\" }</pre><br/>Note that finAPI does not process the response of this call. Also note that while the callback URL may be a non-secured (http) URL on the finAPI sandbox or alpha environment, it MUST be a SSL-secured (https) URL on the finAPI live system.</p>As long as you have just one client, you can ignore this field and let it be null. However keep in mind that in this case your client will not receive any callback when a user gets deleted - so the deletion of the user on the client-side must not be forgotten. Of course you may still use the callback URL even for just one client, if you want to implement the deletion of the user on the client-side via the callback from finAPI.
    attr_accessor :user_synchronization_callback_url

    # The validity period that newly requested refresh tokens initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation, or when a user gets locked, or when the password is reset for a user).
    attr_accessor :refresh_tokens_validity_period

    # The validity period that newly requested access tokens for users initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation, or when a user gets locked, or when the password is reset for a user).
    attr_accessor :user_access_tokens_validity_period

    # The validity period that newly requested access tokens for clients initially have (in seconds). A value of 0 means that the tokens never expire (Unless explicitly invalidated, e.g. by revocation).
    attr_accessor :client_access_tokens_validity_period

    # Number of consecutive failed login attempts of a user into his finAPI account that is allowed before finAPI locks the user's account. When a user's account is locked, finAPI will invalidate all user's tokens and it will deny any service call in the context of this user (i.e. any call to a service using one of the user's authorization tokens, as well as the service for requesting a new token for this user). To unlock a user's account, a new password must be set for the account by the client (see the services /users/requestPasswordChange and /users/executePasswordChange). Once a new password has been set, all services will be available again for this user and the user's failed login attempts counter is reset to 0. The user's failed login attempts counter is also reset whenever a new authorization token has been successfully retrieved, or whenever the user himself changes his password.<br/><br/>Note that when this field has a value of 0, it means that there is no limit for user login attempts, i.e. finAPI will never lock user accounts.
    attr_accessor :max_user_login_attempts

    # Whether users that are created with this client are automatically verified on creation. If this field is set to 'false', then any user that is created with this client must first be verified with the \"Verify a user\" service before he can be authorized. If the field is 'true', then no verification is required by the client and the user can be authorized immediately after creation.
    attr_accessor :is_user_auto_verification_enabled

    # Whether this client is a 'Mandator Admin'. Mandator Admins are special clients that can access the 'Mandator Administration' section of finAPI. If you do not yet have credentials for a Mandator Admin, please contact us at support@finapi.io. For further information, please refer to <a href='https://finapi.zendesk.com/hc/en-us/articles/115003661827-Difference-between-app-clients-and-mandator-admin-client' target='_blank'>this article</a> on our Dev Portal.
    attr_accessor :is_mandator_admin

    # Whether finAPI is allowed to use the WEB_SCRAPER interface for data download. If this field is set to 'true', then finAPI might download data from the online banking websites of banks (either in addition to other interfaces, or as the sole data source for the download). If this field is set to 'false', then finAPI will not use any web scrapers. For banks where no other interface except WEB_SCRAPER is available, finAPI will not allow any data download at all if web scraping is disabled for your client. Please contact your Sys-Admin if you want to change this setting.
    attr_accessor :is_web_scraping_enabled

    # List of bank groups that are available to this client. A bank group is a collection of all banks that are located in a certain country, and is defined by the country's ISO 3166 ALPHA-2 code (see also field 'location' of Bank resource). If you want to extend or limit the available bank groups for your client, please contact your Sys-Admin.<br/><br/>Note: There is no bank group for international institutes (i.e. institutes that are not bound to any specific country). Instead, those institutes are always available. If this list is empty, it means that ONLY international institutes are available.
    attr_accessor :available_bank_groups

    # Application name. When an application name is set (e.g. \"My App\"), then <a href='https://finapi.zendesk.com/hc/en-us/articles/360002596391' target='_blank'>finAPI's web form</a> will display a text to the user \"Weiterleitung auf finAPI von ...\" (e.g. \"Weiterleitung auf finAPI von MyApp\").
    attr_accessor :application_name

    # Whether <a href='https://finapi.zendesk.com/hc/en-us/articles/360002596391' target='_blank'>finAPI's web form</a> will provide a checkbox for the user allowing him to choose whether to store login secrets (like a PIN, or a token from the bank) in finAPI. If this field is set to false, then the user won't have an option to store this data.
    attr_accessor :store_secrets_available_in_web_form

    # Whether this client is allowed to do payments
    attr_accessor :payments_enabled

    # Whether <a href='https://finapi.zendesk.com/hc/en-us/articles/360002596391' target='_blank'>finAPI's web form</a> will provide a checkbox for the user allowing him to choose whether to store his banking PIN in finAPI. If this field is set to false, then the user won't have an option to store his PIN.<br><br>NOTE: This field is deprecated and will be removed at some point. Refer to field 'storeSecretsAvailableInWebForm' instead.
    attr_accessor :pin_storage_available_in_web_form

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'is_automatic_batch_update_enabled' => :'isAutomaticBatchUpdateEnabled',
        :'user_notification_callback_url' => :'userNotificationCallbackUrl',
        :'user_synchronization_callback_url' => :'userSynchronizationCallbackUrl',
        :'refresh_tokens_validity_period' => :'refreshTokensValidityPeriod',
        :'user_access_tokens_validity_period' => :'userAccessTokensValidityPeriod',
        :'client_access_tokens_validity_period' => :'clientAccessTokensValidityPeriod',
        :'max_user_login_attempts' => :'maxUserLoginAttempts',
        :'is_user_auto_verification_enabled' => :'isUserAutoVerificationEnabled',
        :'is_mandator_admin' => :'isMandatorAdmin',
        :'is_web_scraping_enabled' => :'isWebScrapingEnabled',
        :'available_bank_groups' => :'availableBankGroups',
        :'application_name' => :'applicationName',
        :'store_secrets_available_in_web_form' => :'storeSecretsAvailableInWebForm',
        :'payments_enabled' => :'paymentsEnabled',
        :'pin_storage_available_in_web_form' => :'pinStorageAvailableInWebForm'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'is_automatic_batch_update_enabled' => :'BOOLEAN',
        :'user_notification_callback_url' => :'String',
        :'user_synchronization_callback_url' => :'String',
        :'refresh_tokens_validity_period' => :'Integer',
        :'user_access_tokens_validity_period' => :'Integer',
        :'client_access_tokens_validity_period' => :'Integer',
        :'max_user_login_attempts' => :'Integer',
        :'is_user_auto_verification_enabled' => :'BOOLEAN',
        :'is_mandator_admin' => :'BOOLEAN',
        :'is_web_scraping_enabled' => :'BOOLEAN',
        :'available_bank_groups' => :'Array<String>',
        :'application_name' => :'String',
        :'store_secrets_available_in_web_form' => :'BOOLEAN',
        :'payments_enabled' => :'BOOLEAN',
        :'pin_storage_available_in_web_form' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'isAutomaticBatchUpdateEnabled')
        self.is_automatic_batch_update_enabled = attributes[:'isAutomaticBatchUpdateEnabled']
      end

      if attributes.has_key?(:'userNotificationCallbackUrl')
        self.user_notification_callback_url = attributes[:'userNotificationCallbackUrl']
      end

      if attributes.has_key?(:'userSynchronizationCallbackUrl')
        self.user_synchronization_callback_url = attributes[:'userSynchronizationCallbackUrl']
      end

      if attributes.has_key?(:'refreshTokensValidityPeriod')
        self.refresh_tokens_validity_period = attributes[:'refreshTokensValidityPeriod']
      end

      if attributes.has_key?(:'userAccessTokensValidityPeriod')
        self.user_access_tokens_validity_period = attributes[:'userAccessTokensValidityPeriod']
      end

      if attributes.has_key?(:'clientAccessTokensValidityPeriod')
        self.client_access_tokens_validity_period = attributes[:'clientAccessTokensValidityPeriod']
      end

      if attributes.has_key?(:'maxUserLoginAttempts')
        self.max_user_login_attempts = attributes[:'maxUserLoginAttempts']
      end

      if attributes.has_key?(:'isUserAutoVerificationEnabled')
        self.is_user_auto_verification_enabled = attributes[:'isUserAutoVerificationEnabled']
      end

      if attributes.has_key?(:'isMandatorAdmin')
        self.is_mandator_admin = attributes[:'isMandatorAdmin']
      end

      if attributes.has_key?(:'isWebScrapingEnabled')
        self.is_web_scraping_enabled = attributes[:'isWebScrapingEnabled']
      end

      if attributes.has_key?(:'availableBankGroups')
        if (value = attributes[:'availableBankGroups']).is_a?(Array)
          self.available_bank_groups = value
        end
      end

      if attributes.has_key?(:'applicationName')
        self.application_name = attributes[:'applicationName']
      end

      if attributes.has_key?(:'storeSecretsAvailableInWebForm')
        self.store_secrets_available_in_web_form = attributes[:'storeSecretsAvailableInWebForm']
      end

      if attributes.has_key?(:'paymentsEnabled')
        self.payments_enabled = attributes[:'paymentsEnabled']
      end

      if attributes.has_key?(:'pinStorageAvailableInWebForm')
        self.pin_storage_available_in_web_form = attributes[:'pinStorageAvailableInWebForm']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @is_automatic_batch_update_enabled.nil?
        invalid_properties.push('invalid value for "is_automatic_batch_update_enabled", is_automatic_batch_update_enabled cannot be nil.')
      end

      if @max_user_login_attempts.nil?
        invalid_properties.push('invalid value for "max_user_login_attempts", max_user_login_attempts cannot be nil.')
      end

      if @is_user_auto_verification_enabled.nil?
        invalid_properties.push('invalid value for "is_user_auto_verification_enabled", is_user_auto_verification_enabled cannot be nil.')
      end

      if @is_mandator_admin.nil?
        invalid_properties.push('invalid value for "is_mandator_admin", is_mandator_admin cannot be nil.')
      end

      if @is_web_scraping_enabled.nil?
        invalid_properties.push('invalid value for "is_web_scraping_enabled", is_web_scraping_enabled cannot be nil.')
      end

      if @available_bank_groups.nil?
        invalid_properties.push('invalid value for "available_bank_groups", available_bank_groups cannot be nil.')
      end

      if @store_secrets_available_in_web_form.nil?
        invalid_properties.push('invalid value for "store_secrets_available_in_web_form", store_secrets_available_in_web_form cannot be nil.')
      end

      if @payments_enabled.nil?
        invalid_properties.push('invalid value for "payments_enabled", payments_enabled cannot be nil.')
      end

      if @pin_storage_available_in_web_form.nil?
        invalid_properties.push('invalid value for "pin_storage_available_in_web_form", pin_storage_available_in_web_form cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @is_automatic_batch_update_enabled.nil?
      return false if @max_user_login_attempts.nil?
      return false if @is_user_auto_verification_enabled.nil?
      return false if @is_mandator_admin.nil?
      return false if @is_web_scraping_enabled.nil?
      return false if @available_bank_groups.nil?
      return false if @store_secrets_available_in_web_form.nil?
      return false if @payments_enabled.nil?
      return false if @pin_storage_available_in_web_form.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          is_automatic_batch_update_enabled == o.is_automatic_batch_update_enabled &&
          user_notification_callback_url == o.user_notification_callback_url &&
          user_synchronization_callback_url == o.user_synchronization_callback_url &&
          refresh_tokens_validity_period == o.refresh_tokens_validity_period &&
          user_access_tokens_validity_period == o.user_access_tokens_validity_period &&
          client_access_tokens_validity_period == o.client_access_tokens_validity_period &&
          max_user_login_attempts == o.max_user_login_attempts &&
          is_user_auto_verification_enabled == o.is_user_auto_verification_enabled &&
          is_mandator_admin == o.is_mandator_admin &&
          is_web_scraping_enabled == o.is_web_scraping_enabled &&
          available_bank_groups == o.available_bank_groups &&
          application_name == o.application_name &&
          store_secrets_available_in_web_form == o.store_secrets_available_in_web_form &&
          payments_enabled == o.payments_enabled &&
          pin_storage_available_in_web_form == o.pin_storage_available_in_web_form
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [is_automatic_batch_update_enabled, user_notification_callback_url, user_synchronization_callback_url, refresh_tokens_validity_period, user_access_tokens_validity_period, client_access_tokens_validity_period, max_user_login_attempts, is_user_auto_verification_enabled, is_mandator_admin, is_web_scraping_enabled, available_bank_groups, application_name, store_secrets_available_in_web_form, payments_enabled, pin_storage_available_in_web_form].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = FinapiApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
