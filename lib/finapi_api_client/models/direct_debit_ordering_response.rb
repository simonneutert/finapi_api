=begin
#finAPI RESTful Services (alpha build)

#finAPI RESTful Services (alpha build)

OpenAPI spec version: finAPI PSD2-alpha (based on v.1.73.0)

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.7

=end

require 'date'

module FinapiApiClient
  # Bank server's response to a direct debit order request
  class DirectDebitOrderingResponse
    # Technical message from the bank server, confirming the success of the request. Typically, you would not want to present this message to the user. Note that this field may not be set. However if it is not set, it does not necessarily mean that there was an error in processing the request.
    attr_accessor :success_message

    # In some cases, a bank server may accept the requested order, but return a warn message. This message may be of technical nature, but could also be of interest to the user.
    attr_accessor :warn_message

    # Payment identifier. Can be used to retrieve the status of the payment (see 'Get payments' service).
    attr_accessor :payment_id

    # Message from the bank server containing information or instructions on how to retrieve the TAN that is needed to execute the requested order. This message should be presented to the user. Note that some bank servers may limit the message to just the most crucial information, e.g. the message may contain just a single number that depicts the target TAN number on a user's TAN list. You may want to parse the challenge message for such cases and extend it with more detailed information before showing it to the user.
    attr_accessor :challenge_message

    # Suggestion from the bank server on how you can label your input field where the user must enter his TAN. A typical value that many bank servers give is 'TAN-Nummer'.
    attr_accessor :answer_field_label

    # In case that the bank server has instructed the user to look up a TAN from a TAN list, this field may contain the identification number of the TAN list. However in most cases, this field is only set (i.e. not null) when the user has multiple active TAN lists.
    attr_accessor :tan_list_number

    # In case that the bank server has instructed the user to scan a flicker code, then this field will contain the raw data for the flicker animation as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the flicker code data, please address the <a href='https://finapi.zendesk.com' target='_blank'>finAPI Developer Portal</a>.
    attr_accessor :optical_data

    # In case that the 'photoTanData' field is set (i.e. not null), this field contains the MIME type to use for interpreting the photo data (e.g.: 'image/png')
    attr_accessor :photo_tan_mime_type

    # In case that the bank server has instructed the user to scan a photo (or more generally speaking, any kind of QR-code-like data), then this field will contain the raw data of the photo as a BASE-64 string. Otherwise, this field will be not set (i.e. null). For more information on how to process the photo data, please address the <a href='https://finapi.zendesk.com' target='_blank'>finAPI Developer Portal</a>.
    attr_accessor :photo_tan_data

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'success_message' => :'successMessage',
        :'warn_message' => :'warnMessage',
        :'payment_id' => :'paymentId',
        :'challenge_message' => :'challengeMessage',
        :'answer_field_label' => :'answerFieldLabel',
        :'tan_list_number' => :'tanListNumber',
        :'optical_data' => :'opticalData',
        :'photo_tan_mime_type' => :'photoTanMimeType',
        :'photo_tan_data' => :'photoTanData'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'success_message' => :'String',
        :'warn_message' => :'String',
        :'payment_id' => :'Integer',
        :'challenge_message' => :'String',
        :'answer_field_label' => :'String',
        :'tan_list_number' => :'String',
        :'optical_data' => :'String',
        :'photo_tan_mime_type' => :'String',
        :'photo_tan_data' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'successMessage')
        self.success_message = attributes[:'successMessage']
      end

      if attributes.has_key?(:'warnMessage')
        self.warn_message = attributes[:'warnMessage']
      end

      if attributes.has_key?(:'paymentId')
        self.payment_id = attributes[:'paymentId']
      end

      if attributes.has_key?(:'challengeMessage')
        self.challenge_message = attributes[:'challengeMessage']
      end

      if attributes.has_key?(:'answerFieldLabel')
        self.answer_field_label = attributes[:'answerFieldLabel']
      end

      if attributes.has_key?(:'tanListNumber')
        self.tan_list_number = attributes[:'tanListNumber']
      end

      if attributes.has_key?(:'opticalData')
        self.optical_data = attributes[:'opticalData']
      end

      if attributes.has_key?(:'photoTanMimeType')
        self.photo_tan_mime_type = attributes[:'photoTanMimeType']
      end

      if attributes.has_key?(:'photoTanData')
        self.photo_tan_data = attributes[:'photoTanData']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @payment_id.nil?
        invalid_properties.push('invalid value for "payment_id", payment_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @payment_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          success_message == o.success_message &&
          warn_message == o.warn_message &&
          payment_id == o.payment_id &&
          challenge_message == o.challenge_message &&
          answer_field_label == o.answer_field_label &&
          tan_list_number == o.tan_list_number &&
          optical_data == o.optical_data &&
          photo_tan_mime_type == o.photo_tan_mime_type &&
          photo_tan_data == o.photo_tan_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [success_message, warn_message, payment_id, challenge_message, answer_field_label, tan_list_number, optical_data, photo_tan_mime_type, photo_tan_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = FinapiApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
